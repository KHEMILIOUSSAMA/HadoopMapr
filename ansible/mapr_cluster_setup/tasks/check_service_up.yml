- name: Exécuter disksetup pour configurer les disques  # Tâche : configuration des disques via disksetup
  command: /opt/mapr/server/disksetup -F /tmp/disks  # Commande pour exécuter le script de configuration des disques
  when:  # Condition d'exécution de la tâche
    - hostvars[inventory_hostname]['nfs_disks'] | default(0) | int > 0  # Vérifie si 'nfs_disks' est supérieur à 0
  register: disk_setup_result  # Enregistre le résultat de la commande dans une variable

  failed_when: >  # Définit les conditions d'échec de la tâche
    disk_setup_result.rc != 0 and  # La tâche échoue si le code retour (rc) est différent de 0
    'Disk already added in disktab' not in disk_setup_result.stdout  # ...et si le message "Disk already added" n'est pas dans la sortie standard

- name: Filtrer les groupes pertinents  # Étape pour filtrer les groupes d'hôtes ayant '_nodes' dans leur nom
  set_fact:
    filtered_groups: "{{ group_names | select('match', '^(?!Licence_node|edge_node|all_nodes).*_nodes$') | list }}"

- name: Extraire les noms des services basés sur les groupes filtrés  # Transformation des groupes en noms de services
  set_fact:
    service_names: "{{ filtered_groups | map('regex_replace', '_nodes$', '') | map('extract', service_ports) | map(attribute='jps_name') | list | unique }}"

- name: Déterminer les services JPS attendus pour le noeud courant  # Calcul des services attendus en excluant certains groupes
  set_fact:
    expected_services: "{{ group_names | select('match', '^(?!Licence_node|edge_node|all_nodes).*_nodes$') | map('regex_replace', '_nodes$', '') | map('extract', service_ports) | map(attribute='jps_name') | list | unique }}"

- name: Attendre que tous les services soient démarrés  # Bloc pour vérifier et attendre que tous les services démarrent
  block:
    - name: Vérifier les services via jps  # Exécute la commande 'jps' pour lister les services en cours
      command: sudo jps
      register: jps_output
      changed_when: false

    - name: Extraire les noms des services en cours d'exécution  # Extrait les noms des services à partir de la sortie 'jps'
      set_fact:
        running_services: "{{ jps_output.stdout_lines | map('regex_replace', '^\\d+\\s+', '') | list }}"

    - name: Vérifier si tous les services attendus sont en cours d'exécution  # Vérifie si tous les services attendus sont démarrés
      set_fact:
        services_up: "{{ expected_services | select('in', running_services) | list | count == expected_services | length }}"

    - name: Pause avant de réessayer  # Pause pour donner le temps aux services de démarrer avant de réessayer
      pause:
        seconds: 20

    - name: Continuer la vérification si les services ne sont pas tous démarrés  # Condition pour réessayer la vérification
      when: not services_up and retry_count | int < 30
      include_tasks: check_service_up.yml

    - name: Rassembler l'état des services pour chaque hôte  # Génère un rapport pour chaque hôte
      set_fact:
        local_service_status_report: "Hôte {{ inventory_hostname }} - Services démarrés: {{ running_services | intersect(expected_services) | join(', ') }}. Services manquants: {{ expected_services | difference(running_services) | join(', ') }}."

  rescue:
    - name: Échec après plusieurs tentatives  # Condition d'échec après le maximum de tentatives
      fail:
        msg: "Maximum retries of grouped tasks reached or other failure. Services manquants: {{ expected_services | difference(running_services) | list | join(', ') }}"
      when: retry_count | int >= 30

- name: Collecter les rapports de chaque hôte  # Collecte tous les rapports des services pour les hôtes
  set_fact:
    service_status_reports: "{{ groups['all'] | map('extract', hostvars, 'local_service_status_report') | list }}"
  delegate_to: localhost
  run_once: true
